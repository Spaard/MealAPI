{"version":3,"file":"small-drop.js","sourceRoot":"","sources":["../src/small-drop.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAGnD,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAGL,WAAM,GAAG,KAAK,CAAC;QAwDjB,eAAU,GAAG,QAAQ,CAAC;IAkBtB,CAAC;IAhBU,MAAM;QACb,OAAO,IAAI,CAAA;;uBAEQ,IAAI,CAAC,cAAc,qBAAqB,IAAI,CAAC,UAAU;uCACvC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;;;;;;KAM3D,CAAC;IACJ,CAAC;IAEO,cAAc;QACpB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;IAC7B,CAAC;;AAvEe,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkD7B,AAlDuB,CAkDtB;AApDA;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;yCACX;AAwDjB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;6CACH;AA3DT,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA6ErB","sourcesContent":["import {LitElement, html, css} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\n@customElement('small-drop')\r\nexport class smallDrop extends LitElement {\r\n\r\n  @property({type: Boolean})\r\n  isOpen = false;\r\n\r\n  static override styles = css`\r\n  :host {\r\n    display: block;\r\n    width: 89%; \r\n  }\r\n\r\n  .dropdown {\r\n    width: 100%; \r\n    position: relative;\r\n    display: block;\r\n  }\r\n\r\n  .dropbtn {\r\n    cursor: pointer;\r\n    width: 100%; \r\n    padding: 15px;\r\n    font-size: 20px;\r\n    transition: 0.3s;\r\n    text-align: left; \r\n  }\r\n\r\n  .dropbtn:hover, .dropbtn:focus {\r\n    background-color: #575757;\r\n    color: white;\r\n  }\r\n\r\n  .dropdown-content {\r\n    display: none;\r\n    position: relative;\r\n    width: 100%;\r\n    z-index: 1;\r\n    padding-left:15px;\r\n  }\r\n\r\n  .dropdown-content.show {\r\n    display: block;\r\n  }\r\n\r\n  .dropdown-content a {\r\n    color: black;\r\n    padding: 12px 16px;\r\n    font-size: 16px;\r\n    text-decoration: none;\r\n    display: block;\r\n  }\r\n\r\n  .dropdown-content a:hover {\r\n    background-color: #575757;\r\n    color: white;\r\n  }\r\n`;\r\n\r\n\r\n@property({type: String})\r\nfilterName = 'Filter';\r\n\r\n  override render() {\r\n    return html`\r\n      <div class=\"dropdown\">\r\n        <div @click=\"${this.toggleDropdown}\" class=\"dropbtn\">${this.filterName}</div>\r\n        <div class=\"dropdown-content ${this.isOpen ? 'show' : ''}\">\r\n          <a href=\"#\">Link 1</a>\r\n          <a href=\"#\">Link 2</a>\r\n          <a href=\"#\">Link 3</a>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private toggleDropdown() {\r\n    this.isOpen = !this.isOpen; \r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'small-drop': smallDrop;\r\n  }\r\n}\r\n"]}