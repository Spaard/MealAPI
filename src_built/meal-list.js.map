{"version":3,"file":"meal-list.js","sourceRoot":"","sources":["../src/meal-list.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,gBAAgB,CAAC;AAWjB,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;QAIL,oBAAe,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uDAAuD,CAAC,CAAC;gBACtF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;gBAC3C,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACnC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAU,EAAQ,EAAE,CAAC,CAAC;oBAC3C,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,IAAI,EAAE,IAAI,CAAC,OAAO;oBAClB,QAAQ,EAAE,IAAI,CAAC,WAAW;oBAC1B,YAAY,EAAE,IAAI,CAAC,eAAe;oBAClC,QAAQ,EAAE,IAAI,CAAC,YAAY;iBAC5B,CAAC,CAAC,CAAC;YACN,CAAC;SACF,CAAC,CAAC;IA+BL,CAAC;IA7BC;;;;;;;;;;;OAWG;IAEM,MAAM;QACb,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;YACxC,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAA,8BAA8B;YAClD,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAA,wBAAwB;YAC5C,QAAQ,EAAG,CAAC,MAAe,EAAE,EAAE,CAAC,IAAI,CAAA,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAW,EAAE,EAAE,CAAC,IAAI,CAAA;;uBAEtD,IAAI,CAAC,MAAM;qBACb,IAAI,CAAC,IAAI;yBACL,IAAI,CAAC,QAAQ;6BACT,IAAI,CAAC,YAAY;yBACrB,IAAI,CAAC,QAAQ;;SAE7B,CACF,EAAE;SACJ,CAAC,EAAE,CAAA;IACN,CAAC;;AAjDe,sBAAM,GAAG,GAAG,CAAA;GAC3B,AADqB,CACpB;AAFS,eAAe;IAD3B,aAAa,CAAC,WAAW,CAAC;GACd,eAAe,CAmD3B","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {Task} from '@lit/task';\r\nimport './meal-element';\r\n\r\ntype Dish = {\r\n  idMeal : string;\r\n  name : string;\r\n  category : string;\r\n  instructions : string;\r\n  urlImage : string;\r\n}\r\n\r\n@customElement('meal-list')\r\nexport class MealListElement extends LitElement {\r\n  static override styles = css`\r\n  `;\r\n\r\n  _dishDataMining = new Task(this, {\r\n    args: () => [\"test\"],\r\n    task: async () => {\r\n      const response = await fetch(\"https://www.themealdb.com/api/json/v1/1/search.php?s=\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Server response error\");\r\n      }\r\n      const data = await response.json();\r\n      return data.meals.map((meal : any) : Dish=> ({\r\n        idMeal: meal.idMeal,\r\n        name: meal.strMeal,\r\n        category: meal.strCategory,\r\n        instructions: meal.strInstructions,\r\n        urlImage: meal.strMealThumb\r\n      }));\r\n    }\r\n  });\r\n\r\n  /**override render() {\r\n    return html`\r\n      <div class=\"container\"> \r\n        <img class=\"image-preview\" src=\"../images/test.jpg\">\r\n        <div class=\"infos-preview\">\r\n          <span class=\"dish-name\">Nom du plat</span>\r\n          <span class=\"cook-time\">Temps de cook</span>\r\n          <span class=\"main-ingredients\">Ingr√©dients principaux</span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }*/\r\n\r\n  override render(){\r\n    return html`${this._dishDataMining.render({\r\n      initial : () => html`<p>Waiting to start task</p>`,\r\n      pending : () => html`<p>Running task...</p>`,\r\n      complete : (dishes : Dish[]) => html`${dishes.map((dish : Dish) => html`\r\n        <meal-element\r\n            idMeal = ${dish.idMeal}\r\n            name = ${dish.name}\r\n            category = ${dish.category}\r\n            instructions = ${dish.instructions}\r\n            urlImage = ${dish.urlImage}\r\n            ></meal-element>\r\n        `\r\n      )}`\r\n    })}`\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'meal-list': MealListElement;\r\n  }\r\n}\r\n"]}