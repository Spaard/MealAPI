{"version":3,"file":"meal-list.js","sourceRoot":"","sources":["../src/meal-list.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,gBAAgB,CAAC;AAYjB,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;QAGL,oBAAe,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,uDAAuD,CACxD,CAAC;gBACF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;gBAC3C,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACnC;;;;;;;sBAOM;gBACN,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAC1B,CAAC,IAAS,EAAQ,EAAE,CAAC,CAAC;oBACpB,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,IAAI,EAAE,IAAI,CAAC,OAAO;oBAClB,QAAQ,EAAE,IAAI,CAAC,WAAW;oBAC1B,YAAY,EAAE,IAAI,CAAC,eAAe;oBAClC,QAAQ,EACN,IAAI,CAAC,OAAO,KAAK,OAAO;wBACtB,CAAC,CAAC,uEAAuE;wBACzE,CAAC,CAAC,IAAI,CAAC,YAAY;oBACvB,eAAe,EAAE;wBACf,IAAI,CAAC,cAAc;wBACnB,IAAI,CAAC,cAAc;wBACnB,IAAI,CAAC,cAAc;qBACpB;iBACF,CAAC,CACH,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,KAAK,CAAC;YACf,CAAC;SACF,CAAC,CAAC;IAmCL,CAAC;IAjCC;;;;;;;;;;;OAWG;IAEH,8CAA8C;IACrC,MAAM;QACb,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;YACxC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAA,8BAA8B;YACjD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAA,wBAAwB;YAC3C,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE,CAC3B,IAAI,CAAA,GAAG,MAAM,CAAC,GAAG,CACf,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,CAAA;;uBAEP,IAAI,CAAC,MAAM;qBACb,IAAI,CAAC,IAAI;yBACL,IAAI,CAAC,QAAQ;6BACT,IAAI,CAAC,YAAY;yBACrB,IAAI,CAAC,QAAQ;iCACL,IAAI,CAAC,eAAe;;WAE1C,CACF,EAAE;SACN,CAAC,EAAE,CAAC;IACP,CAAC;;AA1Ee,sBAAM,GAAG,GAAG,CAAA,EAAE,AAAR,CAAS;AADpB,eAAe;IAD3B,aAAa,CAAC,WAAW,CAAC;GACd,eAAe,CA4E3B","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport {Task} from '@lit/task';\r\nimport './meal-element';\r\n\r\ntype Dish = {\r\n  idMeal: string;\r\n  name: string;\r\n  category: string;\r\n  instructions: string;\r\n  urlImage: string;\r\n  mainIngredients: string[];\r\n};\r\n\r\n@customElement('meal-list')\r\nexport class MealListElement extends LitElement {\r\n  static override styles = css``;\r\n\r\n  _dishDataMining = new Task(this, {\r\n    args: () => ['test'],\r\n    task: async () => {\r\n      const response = await fetch(\r\n        'https://www.themealdb.com/api/json/v1/1/search.php?s='\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error('Server response error');\r\n      }\r\n      const data = await response.json();\r\n      /**return data.meals.map((meal : any) : Dish => ({\r\n        idMeal: meal.idMeal,\r\n        name: meal.strMeal,\r\n        category: meal.strCategory,\r\n        instructions: meal.strInstructions,\r\n        urlImage: meal.strMealThumb,\r\n        mainIngredients : [meal.strIngredient1, meal.strIngredient2, meal.strIngredient3]\r\n      }));*/\r\n      const data2 = data.meals.map(\r\n        (meal: any): Dish => ({\r\n          idMeal: meal.idMeal,\r\n          name: meal.strMeal,\r\n          category: meal.strCategory,\r\n          instructions: meal.strInstructions,\r\n          urlImage:\r\n            meal.strMeal === 'Migas'\r\n              ? 'https://tse3.mm.bing.net/th?id=OIP.QNc-r97rLf2qAfX9jT2g4wHaE0&pid=Api'\r\n              : meal.strMealThumb,\r\n          mainIngredients: [\r\n            meal.strIngredient1,\r\n            meal.strIngredient2,\r\n            meal.strIngredient3,\r\n          ],\r\n        })\r\n      );\r\n      console.log(data2);\r\n      return data2;\r\n    },\r\n  });\r\n\r\n  /**override render() {\r\n    return html`\r\n      <div class=\"container\"> \r\n        <img class=\"image-preview\" src=\"../images/test.jpg\">\r\n        <div class=\"infos-preview\">\r\n          <span class=\"dish-name\">Nom du plat</span>\r\n          <span class=\"cook-time\">Temps de cook</span>\r\n          <span class=\"main-ingredients\">Ingr√©dients principaux</span>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }*/\r\n\r\n  /**mainIngredients = ${dish.mainIngredients}*/\r\n  override render() {\r\n    return html`${this._dishDataMining.render({\r\n      initial: () => html`<p>Waiting to start task</p>`,\r\n      pending: () => html`<p>Running task...</p>`,\r\n      complete: (dishes: Dish[]) =>\r\n        html`${dishes.map(\r\n          (dish: Dish) => html`\r\n            <meal-element\r\n              idMeal=${dish.idMeal}\r\n              name=${dish.name}\r\n              category=${dish.category}\r\n              instructions=${dish.instructions}\r\n              urlImage=${dish.urlImage}\r\n              .mainIngredients=${dish.mainIngredients}\r\n            ></meal-element>\r\n          `\r\n        )}`,\r\n    })}`;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'meal-list': MealListElement;\r\n  }\r\n}\r\n"]}